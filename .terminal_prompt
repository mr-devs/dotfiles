#!/usr/bin/env bash

# Set the terminal shell prompt style
# A lot of this was inspired by @mathiasbynens prompt: https://github.com/mathiasbynens/dotfiles/blob/main/.bash_prompt
# iTerm → Profiles → Text → use 13pt Menlo font

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

# Add Z shell git completion
autoload -Uz compinit && compinit

# Set colors
if tput setaf 1 &> /dev/null; then
	# Reference: https://robotmoon.com/256-colors/#table-of-color-codes
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	black=$(tput setaf 0);
	blue=$(tput setaf 12);
	cyan=$(tput setaf 37);
	green=$(tput setaf 78);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 160);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

### Set the main prompt
#    Note: `PROMPT` is zsh alias for PS1
PROMPT="${bold}";            # Make line bold
PROMPT+="${userStyle}%n ";   # Add username
PROMPT+="${white}@ ";        # Add '@'
PROMPT+="${hostStyle}%m";    # Add host
PROMPT+="${white} in ";      # Add 'in'
PROMPT+="${green}%2d ";      # Add working directory, two levels deep (including base)
PROMPT+="${reset}";          # Reset color
PROMPT+="
-> "                         # Where commands will be entered
zle_highlight=(default:bold)  # Control command line highlighting, make CL bold
export PROMPT

### Add some GitHub info to the prompt (included on the right side of the line)
# ------------------------------------------------------------------------------------
# Reference: https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Version-Control-Information (26.5)

# Load version control system info (i.e., Git) into the CL prompt
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst

# Format what is included if within a Git managed directory
# %b = branch name
# %c = if staged changes exist, include the string below
# %u = if unstaged changes exist, include the string below (only works for tracked files)
zstyle ':vcs_info:git*' formats "[%b]%c%u"              # For info on formats, see reference above
zstyle ':vcs_info:git*' check-for-changes true          # If true, allows the inclusion of %u but slower than `check-for-staged-changes`
zstyle ':vcs_info:git*' check-for-staged-changes false  # If true, excludes %u from propmt but faster than `check-for-changes`
zstyle ':vcs_info:git*' stagedstr "S"
zstyle ':vcs_info:git*' unstagedstr "U"

### Including the below function checks the repo for *untracked* changes and includes information in the above gitprompt (the "T" below) if found
#   Note: This seems to be extremely expensive for even moderately sized repos
#   Reference: https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
# zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
# +vi-git-untracked(){
#     if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
#         # git status --porcelain | grep -q '^?? ' 2> /dev/null ; then
#         # The Above will show the marker if there are any untracked files in repo.
#         # If instead you want to show the marker only if there are untracked
#         # files in $PWD, use:
#         [[ -n $(git ls-files --others --exclude-standard) ]] ; then
#         hook_com[staged]+='T'
#     fi
# }

# This includes everything we've done above in the RIGHTSIDE of the command line
RPROMPT='${vcs_info_msg_0_}'
export RPROMPT
# ------------------------------------------------------------------------------------